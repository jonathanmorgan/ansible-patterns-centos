---
# This playbook will set up the CVNC web application.
# NOTE: uses variables being set in defaults/main.yml to tell when to do steps.
#     Some steps will need to be done first, variables set based on external
#     work, then re-run again.

#------------------------------------------------------------------------------#
# Create a user for the application.
#------------------------------------------------------------------------------#

- name: Create SSH keys for ansible user if not already there.
  user:
    name: "{{ansible_user}}"
    state: "present"
    generate_ssh_key: yes
    ssh_key_bits: 4096
    ssh_key_file: .ssh/id_rsa

# EXTERNAL: add public key to authorized_keys on server, then:
# - ssh into server from command line as user cvnc once, to verify SSH stuff: ssh 205.145.140.65
# - in defaults/main.yml, set "do_git: true".

# set up directories

- name: make {{ project_name }} home
  file:
    path: "/home/{{ ansible_user }}/work/{{ project_name }}"
    state: directory

- name: make sure there is a django folder in {{ project_name }} home
  file:
    path: "/home/{{ ansible_user }}/work/{{ project_name }}/django"
    state: directory

- name: make sure there is a django/logs folder in {{ project_name }} home
  file:
    path: "/home/{{ ansible_user }}/work/{{ project_name }}/django/logs"
    state: directory

- name: make sure there is a backups folder in {{ project_name }} home
  file:
    path: "/home/{{ ansible_user }}/work/{{ project_name }}/backups"
    state: directory

# use git to retrieve (might have to just do this manually):

# - webroot repo: ssh://project_host_username@{{ project_host_url }}/home/cvnc/git/webroot.git
- name: clone webroot
  git:
    repo: ssh://project_host_username@{{ project_host_url }}/home/cvnc/git/webroot.git
    dest: "/home/{{ ansible_user }}/work/{{ project_name }}/webroot"
  when: do_git == true

# - django repo: ssh://project_host_username@{{ project_host_url }}/home/cvnc/git/django-apps.git
- name: clone django repo
  git:
    repo: ssh://project_host_username@{{ project_host_url }}/home/cvnc/git/django-apps.git
    dest: "/home/{{ ansible_user }}/work/{{ project_name }}/django/django-apps"
  when: do_git == true

# - cf-components repo: ssh://project_host_username@{{ project_host_url }}/home/cvnc/git/cf-components.git
- name: clone cf-components repo
  git:
    repo: ssh://project_host_username@{{ project_host_url }}/home/cvnc/git/cf-components.git
    dest: "/home/{{ ansible_user }}/work/{{ project_name }}/webroot/cf-components"
  when: do_git == true

#------------------------------------------------------------------------------#
# cvnc mysql setup
#------------------------------------------------------------------------------#

# MANUAL
# - download database backup to ~/backups and gunzip.
# - update defaults/main.yml:
#     - db_dump_file_name
#     - do_db: true

# create cvnc database
- name: Create database with name '{{ db_name }}''
  mysql_db:
    login_user: root
    login_password: "{{ server_mysql_root_password }}"
    name: "{{ db_name }}"
    state: present
  when: do_db == true

# check if {{ db_user_name }} MySQL user created.
- name: check if user {{ db_user_name }} exists
  shell: mysql -u root -p{{ server_mysql_root_password }} -e 'SELECT DISTINCT User FROM mysql.user;' | grep {{ db_user_name }}
  register: mysql_user_exists_check
  failed_when: mysql_user_exists_check.rc == 2
  when: do_db == true

# To see detailed output
- debug:
    var: mysql_user_exists_check
  when: do_db == true

# create {{ db_user_name }} mysql user
- name: Create MySQL user {{ db_user_name }}
  become: yes
  become_user: root
  mysql_user:
    login_user: root
    login_password: "{{ server_mysql_root_password }}"
    name: "{{ db_user_name }}"
    password: "{{ db_password }}"
    host: "{{ item }}"
    priv: 'cvnc.*:ALL'
    state: present
  with_items:
    - ::1
    - 127.0.0.1
    - "localhost"
  when:
    - do_db == true
    - mysql_user_exists_check.rc == 1
    - mysql_user_exists_check.stdout == ""
  notify: restart mysql
  tags: mysql

# import database
- name: Import database data.
  mysql_db:
    login_user: "{{ db_user_name }}"
    login_password: "{{ db_password }}"
    name: cvnc
    state: import
    target: /home/{{ ansible_user }}/work/{{ project_name }}/backups/{{ db_dump_file_name }}
  when: do_db == true

#------------------------------------------------------------------------------#
# python
#------------------------------------------------------------------------------#

#------------------------------------------------------------------------------#
# install python (see python and django notes: https://docs.google.com/document/d/1ebH1QiV_9vxNhAT1YvVyuTRAgzc6tD1N9g2lklTIQl0/edit?usp=sharing)

# does install file already exist?
- name: Ansible check if directory {{ miniconda_install_folder }} exists
  stat:
    path: /home/{{ ansible_user }}/Downloads/{{ miniconda_script }}
  register: miniconda_install_file_exists
  when: do_python == true

# - download latest Miniconda3, 64-bit: https://docs.conda.io/en/latest/miniconda.html
- name: Download latest Miniconda3
  get_url:
    url: "{{ miniconda_url }}"
    dest: /home/{{ ansible_user }}/Downloads/{{ miniconda_script }}
    mode: '0755'
  when:
    - do_python == true
    - miniconda_install_file_exists.stat.exists == false

# does installation folder already exist?
- name: Ansible check if directory {{ miniconda_install_folder }} exists
  stat:
    path: "{{ miniconda_install_folder }}"
  register: miniconda_install_folder_exists
  when: do_python == true

# - run installer as root, accept license, install to /opt/miniconda3
- name: run installer as root, accept license, install to {{ miniconda_install_folder }}
  become: yes
  become_user: root
  shell: bash /home/{{ ansible_user }}/Downloads/{{ miniconda_script }} -b -p {{ miniconda_install_folder }}
  when:
    - do_python == true
    - miniconda_install_folder_exists.stat.exists == false

#------------------------------------------------------------------------------#
# add links to python 3.7 libraries to /usr/local/lib:

# sudo ln -s /opt/miniconda3/lib/libpython3.7m.so /usr/local/lib
- name: add link to libpython3.7m.so to /usr/local/lib
  become: yes
  become_user: root
  file:
    src: "{{ miniconda_install_folder }}/lib/libpython3.7m.so"
    dest: /usr/local/lib/libpython3.7m.so
    owner: root
    group: root
    state: link
  when: do_python == true

# sudo ln -s /opt/miniconda3/lib/libpython3.7m.so.1 /usr/local/lib
- name: add link to libpython3.7m.so.1 to /usr/local/lib
  become: yes
  become_user: root
  file:
    src: "{{ miniconda_install_folder }}/lib/libpython3.7m.so.1.0"
    dest: /usr/local/lib/libpython3.7m.so.1
    owner: root
    group: root
    state: link
  when: do_python == true

# sudo ln -s /opt/miniconda3/lib/libpython3.7m.so.1.0 /usr/local/lib
- name: add link to libpython3.7m.so.1.0 to /usr/local/lib
  become: yes
  become_user: root
  file:
    src: "{{ miniconda_install_folder }}/lib/libpython3.7m.so.1.0"
    dest: /usr/local/lib/libpython3.7m.so.1.0
    owner: root
    group: root
    state: link
  when: do_python == true

# configure ld to find shared Python libs
- name: configure ld to find shared Python 3 libs.
  become: yes
  become_user: root
  template:
    src: opt-miniconda3.conf.j2
    dest: /etc/ld.so.conf.d/opt-miniconda3.conf
  when: do_python == true

# update the active ld config to reflect changes
- name: update the active ld config to reflect changes
  become: yes
  become_user: root
  shell: /sbin/ldconfig -v
  when: do_python == true


#------------------------------------------------------------------------------#
# virtualenv and virtualenvwrapper setup
#------------------------------------------------------------------------------#

# install virtualenv
#     sudo /opt/miniconda3/bin/conda install virtualenv
- name: install virtualenv
  become: yes
  become_user: root
  shell: /opt/miniconda3/bin/conda install -y virtualenv
  when: do_python == true

# install virtualenvwrapper
#     sudo /opt/miniconda3/bin/pip install virtualenvwrapper
- name: install virtualenvwrapper
  become: yes
  become_user: root
  pip:
    executable: /opt/miniconda3/bin/pip
    name:
      - virtualenvwrapper
    state: latest
  when: do_python == true

# add virtualenv configuration to .bashrc

#------------------------------------------------------------------------------#
# comment out existing virtualenv setup

# export VIRTUALENVWRAPPER_PYTHON=/usr/bin/python3
- name: comment out VIRTUALENVWRAPPER_PYTHON
  replace:
    path: "/home/{{ ansible_user }}/.bashrc"
    regexp: '^(export VIRTUALENVWRAPPER_PYTHON=/usr/bin/python3)$'
    replace: '#\1'
  when: do_python == true

# export WORKON_HOME=/home/jonathanmorgan/.virtualenvs
- name: comment out WORKON_HOME
  replace:
    path: "/home/{{ ansible_user }}/.bashrc"
    regexp: '^(export WORKON_HOME=/home/{{ ansible_user }}/.virtualenvs)$'
    replace: '#\1'
  when: do_python == true

# export PROJECT_HOME=$HOME/work/vew-projects
- name: comment out PROJECT_HOME
  replace:
    path: "/home/{{ ansible_user }}/.bashrc"
    regexp: '^(export PROJECT_HOME=$HOME/work/vew-projects)$'
    replace: '#\1'
  when: do_python == true

# source /usr/local/bin/virtualenvwrapper.sh
- name: comment out source virtualenvwrapper.sh
  replace:
    path: "/home/{{ ansible_user }}/.bashrc"
    regexp: '^(source /usr/local/bin/virtualenvwrapper.sh)$'
    replace: '#\1'
  when: do_python == true

#------------------------------------------------------------------------------#
# add miniconda virtualenv setup

# export WORKON_HOME=$HOME/.virtualenvs
- name: add virtualenv init to .bashrc - workon home
  lineinfile:
    path: "/home/{{ ansible_user }}/.bashrc"
    line: export WORKON_HOME=$HOME/.virtualenvs
  when: do_python == true

# export PROJECT_HOME=$HOME/work/vew-projects
- name: add virtualenv init to .bashrc - project home
  lineinfile:
    path: "/home/{{ ansible_user }}/.bashrc"
    line: export PROJECT_HOME=$HOME/work/vew-projects
  when: do_python == true

# if on CentOS, where latest python has to be installed alongside system python

# export VIRTUALENVWRAPPER_PYTHON=/opt/miniconda3/bin/python
- name: add virtualenv init to .bashrc - path to miniconda python
  lineinfile:
    path: "/home/{{ ansible_user }}/.bashrc"
    line: export VIRTUALENVWRAPPER_PYTHON=/opt/miniconda3/bin/python
  when: do_python == true

# export VIRTUALENVWRAPPER_VIRTUALENV=/opt/miniconda3/bin/virtualenv
- name: add virtualenv init to .bashrc - path to virtualenv executable
  lineinfile:
    path: "/home/{{ ansible_user }}/.bashrc"
    line: VIRTUALENVWRAPPER_VIRTUALENV=/opt/miniconda3/bin/virtualenv
  when: do_python == true

# source /opt/miniconda3/bin/virtualenvwrapper.sh
- name: add virtualenv init to .bashrc - source virtualenvwrapper init script.
  lineinfile:
    path: "/home/{{ ansible_user }}/.bashrc"
    line: source /opt/miniconda3/bin/virtualenvwrapper.sh
  when: do_python == true

# configure apache

# mod wsgi?