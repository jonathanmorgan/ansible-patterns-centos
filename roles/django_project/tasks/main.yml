---
# Install pre-req packages
- name: install lxml pre-reqs (dnf)
  become: yes
  become_user: root
  dnf:
    name:
      - libxml2
      - libxml2-devel
      - libxslt
      - libxslt-devel
      - libyaml-devel
      - expect
    state: present
  when: server_centos_package_manager == "dnf"

- name: install lxml pre-reqs (yum)
  become: yes
  become_user: root
  yum:
    name:
      - libxml2
      - libxml2-devel
      - libxslt
      - libxslt-devel
      - libyaml-devel
      - expect
    state: present
  when: server_centos_package_manager == "yum"

# check if virtualenv already there.
- name: check if virtualenv exists ({{ django_virtualenv_path }})
  stat:
    path: '{{ django_virtualenv_path }}'
  register: django_virtualenv

# create virtualenv for django project
- name: create virtualenv for django project
  shell: "{{ django_virtualenv_from_env_bin }}/virtualenv {{ django_virtualenv_name }} --python {{ django_virtualenv_from_env_python }}"
  args:
    chdir: "{{ virtualenv_folder }}/"
  when: django_virtualenv.stat.exists == False

# install django, db package, and other essentials in virtualenv
- name: install django and db package in virtualenv {{ django_virtualenv_path }}
  pip:
    virtualenv: "{{ django_virtualenv_path }}"
    name:
      - pip
      - django<4.0
      - "{{ django_db_python_package }}"
      - ipython
      - ipykernel
      - django-autocomplete-light
      - django-taggit
      - beautifulsoup4
      - requests
      - w3lib
      - six
    state: latest
  environment:
    PATH: "{{ db_postgresql_bin_path }}:$PATH"

# install virtualenv as jupyter kernel
- name: make {{ django_project_name }} project virtualenv a kernel
  become: yes
  become_user: root
  shell: '{{ django_virtualenv_bin_path }}/python -m ipykernel install --name {{ django_project_name }} --display-name "{{ django_project_name }}_virtualenv"'

# create django project parent folder {{ django_project_parent_folder_path }}
- name: create django project parent folder {{ django_project_parent_folder_path }}
  file:
    path: "{{ django_project_parent_folder_path }}"
    state: directory

# check if django project already there.
- name: check if django project already there.
  stat:
    path: '{{ django_project_folder_path }}'
  register: django_project

# create django project
- name: create django project
  shell: "{{ django_virtualenv_bin_path }}/{{django_admin_command}} startproject {{ django_project_name }}"
  args:
    chdir: "{{ django_project_parent_folder_path }}/"
  when: django_project.stat.exists == False

# put settings.py in place
- name: put settings.py in place
  template:
    src: settings.py.j2
    dest: '{{ django_project_folder_path }}/{{ django_project_name }}/settings.py'

# put wsgi.py in place
- name: put wsgi.py in place
  template:
    src: wsgi.py.j2
    dest: '{{ django_project_folder_path }}/{{ django_project_name }}/wsgi.py'

# put urls.py in place
- name: put urls.py in place
  template:
    src: urls.py.j2
    dest: '{{ django_project_folder_path }}/{{ django_project_name }}/urls.py'
  notify:
  - "set-django-project-permissions"


# create django log file
- name: make sure there is a "{{ django_log_file_path }}" log file.
  file:
    path: "{{ django_log_file_path }}"
    state: touch
    mode: 0666

#===============================================================================
# ==> set up database.

- name: 
  include: database_setup_postgresql.yml
  when: django_database_type == "postgresql"

- name: 
  include: database_setup_mysql.yml
  when: django_database_type == "mysql"

# create django superuser

# from gist: https://gist.github.com/elleryq/9c70e08b1b2cecc636d6

# trying something different - having ipython as shell breaks it.

# check if superuser user exists.
#- name: super user {{ django_superuser_username }} exists?
#  command: echo "from django.contrib.auth import get_user_model; User = get_user_model(); print(User.objects.filter(username='{{ django_superuser_username }}').count()>0)" | {{ django_virtualenv_bin_path }}/python ./manage.py shell -i python
#  args:
#    chdir: "{{ django_project_folder_path }}"
#  environment:
#    DJANGO_SETTINGS_MODULE: "{{ django_settings_import }}"
#  register: superuser_existed

# if no super user, create.
#- name: If no super user {{ django_superuser_username }}, create super user
#  django_manage:
#    command: "createsuperuser --noinput --username={{ django_superuser_username }} --email={{ admin_email }}"
#    app_path: "{{ django_project_folder_path }}"
#    virtualenv: "{{ django_virtualenv_path }}"
#    settings: "{{ django_settings_import }}"
#  when: not superuser_existed

# check if superuser user exists, if not, create user.
- name: Check if superuser user exists, if not, create user.
  django_manage:
    command: shell -c "from django.contrib.auth import get_user_model; MyUser = get_user_model(); MyUser.objects.filter( username__exact = '{{ django_superuser_username }}' ).count() == 0 or exit(); new_super_user = MyUser( username = '{{ django_superuser_username }}', password='{{ django_superuser_password }}', email='{{ django_superuser_email }}', is_superuser = True, is_staff = True ); new_super_user.save();"
    app_path: "{{ django_project_folder_path }}"
    virtualenv: "{{ django_virtualenv_path }}"

# set admin password

# place script to update password.
- name: Change password tricks
  template:
    src: changepassword.sh.j2
    dest: "{{ django_project_folder_path }}/changepassword.sh"
    mode: 0755

# set password.
- name: Change password
  shell: "{{ django_project_folder_path }}/changepassword.sh"
  args:
    chdir: "{{ django_project_folder_path }}"
  environment:
    DJANGO_SETTINGS_MODULE: "{{ django_settings_import }}"

# remove script to update password.
- name: remove changepassword.sh
  file:
    path: "{{ django_project_folder_path }}/changepassword.sh"
    state: absent

#===============================================================================
# ==> configure the django web app.
- include: configure_web_app.yml
