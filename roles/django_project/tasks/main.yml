---
#------------------------------------------------------------------------------#
# ==> Install pre-req packages
- name: install lxml pre-reqs (dnf)
  become: yes
  become_user: root
  dnf:
    name:
      - libxml2
      - libxml2-devel
      - libxslt
      - libxslt-devel
      - libyaml-devel
      - expect
    state: present
  when:
    - django_install_os_packages == true
    - server_centos_package_manager == "dnf"

- name: install lxml pre-reqs (yum)
  become: yes
  become_user: root
  yum:
    name:
      - libxml2
      - libxml2-devel
      - libxslt
      - libxslt-devel
      - libyaml-devel
      - expect
    state: present
  when:
    - django_install_os_packages == true
    - server_centos_package_manager == "yum"

#------------------------------------------------------------------------------#
# ==> django home folder

# check if django folder is in /apps
- name: Check if directory {{ django_home_folder_path }} exists
  stat:
    path: "{{ django_home_folder_path }}"
  register: django_home_folder_exists

# if not, create, then update ownership, group, and permissions.
- name: make sure there is a "{{ django_home_folder_path }}" folder (using ansible "file")
  become: yes
  become_user: root
  become_method: sudo
  file:
    path: "{{ django_home_folder_path }}"
    state: directory
  when:
    - django_setup_folders == true
    - django_home_folder_exists.stat.exists == false

- name: Change owner of "{{ django_home_folder_path }}" to ansible user ( {{ ansible_user }}:{{ server_default_group }} ).
  become: yes
  become_user: root
  become_method: sudo
  shell: chown {{ ansible_user }}:{{ server_default_group }} {{ django_home_folder_path }}
  when:
    - django_setup_folders == true
    - django_home_folder_exists.stat.exists == false

- name: Change group permissions to match user permissions.
  become: yes
  become_user: root
  become_method: sudo
  shell: chmod g=u {{ django_home_folder_path }}
  when:
    - django_setup_folders == true
    - django_home_folder_exists.stat.exists == false

- name: Set group sticky bit
  become: yes
  become_user: root
  become_method: sudo
  shell: chmod g+s {{ django_home_folder_path }}
  when:
    - django_setup_folders == true
    - django_home_folder_exists.stat.exists == false

#------------------------------------------------------------------------------#
# ==> django project folder

# check if django project folder exists
- name: Check if directory {{ django_project_home_path }} exists
  stat:
    path: "{{ django_project_home_path }}"
  register: django_project_folder_exists

# create project folder
- name: make sure there is a "{{ django_project_home_path }}" folder (using ansible "file")
  file:
    path: "{{ django_project_home_path }}"
    state: directory
  when:
    - django_project_folder_exists.stat.exists == false

#===============================================================================
# ==> install python environment.

- name: Install conda environment
  include: install_conda_env.yml
  when: django_python_env_type == python_env_type_conda

- name: Install virtualenv
  include: install_virtualenv.yml
  when: django_python_env_type == python_env_type_virtualenv

#- name: Install venv
#  include: install_venv.yml
#  when: django_python_env_type == python_env_type_venv

#------------------------------------------------------------------------------#
# ==> actual django project

# create django project parent folder {{ django_project_parent_folder_path }}
- name: create django project parent folder {{ django_project_parent_folder_path }}
  file:
    path: "{{ django_project_parent_folder_path }}"
    state: directory

# check if django project already there.
- name: check if django project already there.
  stat:
    path: '{{ django_project_folder_path }}'
  register: django_project

# create django project
- name: create django project (virtualenv)
  shell: "{{ django_virtualenv_bin_path }}/{{django_admin_command}} startproject {{ django_project_name }}"
  args:
    chdir: "{{ django_project_parent_folder_path }}/"
  when: django_project.stat.exists == False
    - django_python_env_type == python_env_type_virtualenv

# check if superuser user exists, if not, create user.
- name: create django project (conda)
  shell: source {{ anaconda_base_bin_path }}/activate {{ django_conda_env }} && {{django_admin_command}} startproject {{ django_project_name }}"
  args:
    chdir: "{{ django_project_folder_path }}/"
  when:
    - django_python_env_type == python_env_type_conda


# put settings.py in place
- name: put settings.py in place
  template:
    src: settings.py.j2
    dest: '{{ django_project_folder_path }}/{{ django_project_name }}/settings.py'

# put wsgi.py in place
- name: put wsgi.py in place
  template:
    src: wsgi.py.j2
    dest: '{{ django_project_folder_path }}/{{ django_project_name }}/wsgi.py'

# put urls.py in place
- name: put urls.py in place
  template:
    src: urls.py.j2
    dest: '{{ django_project_folder_path }}/{{ django_project_name }}/urls.py'

#===============================================================================
# ==> set up logs.

# check if django logs folder already there.
- name: check if django logs folder already there.
  stat:
    path: '{{ django_logs_folder_path }}'
  register: django_logs_folder

# create django logs folder
- name: create django logs folder
  file:
    path: "{{ django_logs_folder_path }}"
    state: directory
  when: django_logs_folder.stat.exists == False

# create django log file
- name: make sure there is a "{{ django_log_file_path }}" log file.
  file:
    path: "{{ django_log_file_path }}"
    state: touch
    mode: 0666

#===============================================================================
# ==> set up database.

- name: Setup PostgreSQL database.
  include: database_setup_postgresql.yml
  when: django_database_type == "postgresql"

- name: Setup MySQL database.
  include: database_setup_mysql.yml
  when: django_database_type == "mysql"

- name: Setup SQLite database.
  include: database_setup_sqlite3.yml
  when: django_database_type == "sqlite3"

# create django superuser

# from gist: https://gist.github.com/elleryq/9c70e08b1b2cecc636d6

# trying something different - having ipython as shell breaks it.

# check if superuser user exists.
#- name: super user {{ django_superuser_username }} exists?
#  command: echo "from django.contrib.auth import get_user_model; User = get_user_model(); print(User.objects.filter(username='{{ django_superuser_username }}').count()>0)" | {{ django_virtualenv_bin_path }}/python ./manage.py shell -i python
#  args:
#    chdir: "{{ django_project_folder_path }}"
#  environment:
#    DJANGO_SETTINGS_MODULE: "{{ django_settings_import }}"
#  register: superuser_existed

# if no super user, create.
#- name: If no super user {{ django_superuser_username }}, create super user
#  django_manage:
#    command: "createsuperuser --noinput --username={{ django_superuser_username }} --email={{ admin_email }}"
#    app_path: "{{ django_project_folder_path }}"
#    virtualenv: "{{ django_virtualenv_path }}"
#    settings: "{{ django_settings_import }}"
#  when: not superuser_existed

# check if superuser user exists, if not, create user.
- name: Check if superuser user exists, if not, create user.
  django_manage:
    command: shell -c "from django.contrib.auth import get_user_model; MyUser = get_user_model(); MyUser.objects.filter( username__exact = '{{ django_superuser_username }}' ).count() == 0 or exit(); new_super_user = MyUser( username = '{{ django_superuser_username }}', password='{{ django_superuser_password }}', email='{{ django_superuser_email }}', is_superuser = True, is_staff = True ); new_super_user.save();"
    app_path: "{{ django_project_folder_path }}"
    virtualenv: "{{ django_virtualenv_path }}"
  when:
    - django_python_env_type == python_env_type_virtualenv

# check if superuser user exists, if not, create user.
- name: Check if superuser user exists, if not, create user.
  shell: source {{ anaconda_base_bin_path }}/activate {{ django_conda_env }} && python manage.py shell -c "from django.contrib.auth import get_user_model; MyUser = get_user_model(); MyUser.objects.filter( username__exact = '{{ django_superuser_username }}' ).count() == 0 or exit(); new_super_user = MyUser( username = '{{ django_superuser_username }}', password='{{ django_superuser_password }}', email='{{ django_superuser_email }}', is_superuser = True, is_staff = True ); new_super_user.save();"
  args:
    chdir: "{{ django_project_folder_path }}/"
  when:
    - django_python_env_type == python_env_type_conda

# set admin password

# place script to update password.
- name: Change password tricks (virtualenv)
  template:
    src: changepassword.sh-virtualenv.j2
    dest: "{{ django_project_folder_path }}/changepassword.sh"
    mode: 0755
  when:
    - django_python_env_type == python_env_type_virtualenv

- name: Change password tricks (conda)
  template:
    src: changepassword.sh-conda.j2
    dest: "{{ django_project_folder_path }}/changepassword.sh"
    mode: 0755
  when:
    - django_python_env_type == python_env_type_conda

# set password.
- name: Change password
  shell: "{{ django_project_folder_path }}/changepassword.sh"
  args:
    chdir: "{{ django_project_folder_path }}"
  environment:
    DJANGO_SETTINGS_MODULE: "{{ django_settings_import }}"

# remove script to update password.
- name: remove changepassword.sh
  file:
    path: "{{ django_project_folder_path }}/changepassword.sh"
    state: absent

#===============================================================================
# ==> configure the django web app.
- include: configure_web_app.yml
  when:
    - django_configure_apache == true
