---
# This playbook will install and configure Anaconda's miniconda3 distribution
#     for CentOS 7.
# NOTE: uses variables being set in defaults/main.yml.

#------------------------------------------------------------------------------#
# python 3 (miniconda3)
#------------------------------------------------------------------------------#

#------------------------------------------------------------------------------#
# install Anaconda miniconda3 python distribution

# does install file already exist?
- name: Ansible check if install file already downloaded to /home/{{ ansible_user }}/Downloads/{{ miniconda_script }}.
  stat:
    path: /home/{{ ansible_user }}/Downloads/{{ miniconda_script }}
  register: miniconda_install_file_exists
  when: do_miniconda3 == true

# - download latest Miniconda3, 64-bit: https://docs.conda.io/en/latest/miniconda.html
- name: Download latest Miniconda3
  get_url:
    url: "{{ miniconda_url }}"
    dest: /home/{{ ansible_user }}/Downloads/{{ miniconda_script }}
    mode: '0755'
  when:
    - do_miniconda3 == true
    - miniconda_install_file_exists.stat.exists == false

# does installation folder already exist?
- name: Ansible check if directory {{ miniconda_install_folder }} exists
  stat:
    path: "{{ miniconda_install_folder }}"
  register: miniconda_install_folder_exists
  when: do_miniconda3 == true

# - run installer as root, accept license, install to /opt/miniconda3
- name: run installer as root, accept license, install to {{ miniconda_install_folder }}
  become: yes
  become_user: root
  shell: bash /home/{{ ansible_user }}/Downloads/{{ miniconda_script }} -b -p {{ miniconda_install_folder }}
  when:
    - do_miniconda3 == true
    - miniconda_install_folder_exists.stat.exists == false

#------------------------------------------------------------------------------#
# add links to python 3.7 libraries to /usr/local/lib:

# sudo ln -s /opt/miniconda3/lib/libpython3.7m.so /usr/local/lib
- name: add link to libpython3.7m.so to /usr/local/lib
  become: yes
  become_user: root
  file:
    src: "{{ miniconda_install_folder }}/lib/libpython3.7m.so"
    dest: /usr/local/lib/libpython3.7m.so
    owner: root
    group: root
    state: link
  when:
    - do_miniconda3 == true
    - do_miniconda3_links == true

# sudo ln -s /opt/miniconda3/lib/libpython3.7m.so.1.0 /usr/local/lib
- name: add link to libpython3.7m.so.1.0 to /usr/local/lib
  become: yes
  become_user: root
  file:
    src: "{{ miniconda_install_folder }}/lib/libpython3.7m.so.1.0"
    dest: /usr/local/lib/libpython3.7m.so.1.0
    owner: root
    group: root
    state: link
  when:
    - do_miniconda3 == true
    - do_miniconda3_links == true

#------------------------------------------------------------------------------#
# add links to python 3.7 libraries to ld config:

# create side lib folder {{ miniconda_lib_link_folder }}
- name: make sure there is a "{{ miniconda_lib_link_folder }}" folder
  become: yes
  become_user: root
  file:
    path: "{{ miniconda_lib_link_folder }}"
    state: directory
  when:
    - do_miniconda3 == true
    - do_miniconda3_links == true
    - miniconda_lib_link_folder != ""

# link libs into {{ miniconda_lib_link_folder }}
# - Long story short, you need to just link the python libs that mod_wsgi needs,
#     rather than link all of anaconda's libs, because Anaconda's libs
#     conflict with ones used by CentOS core programs, and this will cause your
#     system to seize up.

# sudo ln -s /opt/miniconda3/lib/libpython3.7m.so {{ miniconda_lib_link_folder }}
- name: add link to libpython3.7m.so to {{ miniconda_lib_link_folder }}
  become: yes
  become_user: root
  file:
    src: "{{ miniconda_install_folder }}/lib/libpython3.7m.so"
    dest: "{{ miniconda_lib_link_folder }}/libpython3.7m.so"
    owner: root
    group: root
    state: link
  when:
    - do_miniconda3 == true
    - do_miniconda3_links == true
    - miniconda_lib_link_folder != ""

# sudo ln -s /opt/miniconda3/lib/libpython3.7m.so.1.0 {{ miniconda_lib_link_folder }}
- name: add link to libpython3.7m.so.1.0 to {{ miniconda_lib_link_folder }}
  become: yes
  become_user: root
  file:
    src: "{{ miniconda_install_folder }}/lib/libpython3.7m.so.1.0"
    dest: "{{ miniconda_lib_link_folder }}/libpython3.7m.so.1.0"
    owner: root
    group: root
    state: link
  when:
    - do_miniconda3 == true
    - do_miniconda3_links == true
    - miniconda_lib_link_folder != ""

# configure ld to find shared Python libs
- name: configure ld to find shared Python 3 libs.
  become: yes
  become_user: root
  template:
    src: opt-miniconda3.conf.j2
    dest: /etc/ld.so.conf.d/opt-miniconda3.conf
  when:
    - do_miniconda3 == true
    - do_miniconda3_links == true

# update the active ld config to reflect changes
- name: update the active ld config to reflect changes
  become: yes
  become_user: root
  shell: /sbin/ldconfig -v
  when:
    - do_miniconda3 == true
    - do_miniconda3_links == true

#------------------------------------------------------------------------------#
# virtualenv and virtualenvwrapper setup
#------------------------------------------------------------------------------#

# install virtualenv
#     sudo /opt/miniconda3/bin/conda install virtualenv
- name: install virtualenv
  become: yes
  become_user: root
  shell: /opt/miniconda3/bin/conda install -y virtualenv
  when: do_miniconda3 == true

# install virtualenvwrapper
#     sudo /opt/miniconda3/bin/pip install virtualenvwrapper
- name: install virtualenvwrapper
  become: yes
  become_user: root
  pip:
    executable: /opt/miniconda3/bin/pip
    name:
      - virtualenvwrapper
    state: latest
  when: do_miniconda3 == true

# add virtualenv configuration to .bashrc

#------------------------------------------------------------------------------#
# comment out existing virtualenv setup

# export VIRTUALENVWRAPPER_PYTHON=/usr/bin/python3
- name: comment out VIRTUALENVWRAPPER_PYTHON
  replace:
    path: "/home/{{ ansible_user }}/.bashrc"
    regexp: '^(export VIRTUALENVWRAPPER_PYTHON=/usr/bin/python3)$'
    replace: '#\1'
  when: do_miniconda3 == true

# export WORKON_HOME=/home/jonathanmorgan/.virtualenvs
- name: comment out WORKON_HOME
  replace:
    path: "/home/{{ ansible_user }}/.bashrc"
    regexp: '^(export WORKON_HOME=/home/{{ ansible_user }}/.virtualenvs)$'
    replace: '#\1'
  when: do_miniconda3 == true

# export PROJECT_HOME=$HOME/work/vew-projects
- name: comment out PROJECT_HOME
  replace:
    path: "/home/{{ ansible_user }}/.bashrc"
    regexp: '^(export PROJECT_HOME=$HOME/work/vew-projects)$'
    replace: '#\1'
  when: do_miniconda3 == true

# source /usr/local/bin/virtualenvwrapper.sh
- name: comment out source virtualenvwrapper.sh
  replace:
    path: "/home/{{ ansible_user }}/.bashrc"
    regexp: '^(source /usr/local/bin/virtualenvwrapper.sh)$'
    replace: '#\1'
  when: do_miniconda3 == true

#------------------------------------------------------------------------------#
# add miniconda virtualenv setup

# export WORKON_HOME=$HOME/.virtualenvs
- name: add virtualenv init to .bashrc - workon home
  lineinfile:
    path: "/home/{{ ansible_user }}/.bashrc"
    line: export WORKON_HOME=$HOME/.virtualenvs
  when: do_miniconda3 == true

# export PROJECT_HOME=$HOME/work/vew-projects
- name: add virtualenv init to .bashrc - project home
  lineinfile:
    path: "/home/{{ ansible_user }}/.bashrc"
    line: export PROJECT_HOME=$HOME/work/vew-projects
  when: do_miniconda3 == true

# if on CentOS, where latest python has to be installed alongside system python

# export VIRTUALENVWRAPPER_PYTHON=/opt/miniconda3/bin/python
- name: add virtualenv init to .bashrc - path to miniconda python
  lineinfile:
    path: "/home/{{ ansible_user }}/.bashrc"
    line: export VIRTUALENVWRAPPER_PYTHON=/opt/miniconda3/bin/python
  when: do_miniconda3 == true

# export VIRTUALENVWRAPPER_VIRTUALENV=/opt/miniconda3/bin/virtualenv
- name: add virtualenv init to .bashrc - path to virtualenv executable
  lineinfile:
    path: "/home/{{ ansible_user }}/.bashrc"
    line: VIRTUALENVWRAPPER_VIRTUALENV=/opt/miniconda3/bin/virtualenv
  when: do_miniconda3 == true

# source /opt/miniconda3/bin/virtualenvwrapper.sh
- name: add virtualenv init to .bashrc - source virtualenvwrapper init script.
  lineinfile:
    path: "/home/{{ ansible_user }}/.bashrc"
    line: source /opt/miniconda3/bin/virtualenvwrapper.sh
  when: do_miniconda3 == true
