---
# This role will download and install jupyterhub server.

# create jupyterhub config folder (defauts to /etc/jupyterhub)
- name: create jupyterhub config folder
  become: yes
  become_user: root
  file:
    path: "{{jupyterhub_config_folder}}"
    state: directory

# see if there is a conda environment for jupyterhub.
- name: Check for presence of jupyterhub conda env "{{ jupyterhub_conda_env }}"
  shell: source {{ anaconda_bin_path }}/activate && conda info --envs | grep {{ jupyterhub_conda_env }}
  register: conda_env_exists_check
  failed_when: conda_env_exists_check.rc == 2

# To see detailed output
- debug:
    var: conda_env_exists_check

# if no environment, create one.
- name: Create jupyterhub env "{{ jupyterhub_conda_env }}" if not already present.
  become: yes
  become_user: root
  shell: source {{ anaconda_bin_path }}/activate && conda create --{{ jupyterhub_conda_env_type }} {{ jupyterhub_conda_env }} --yes
  when:
    - conda_env_exists_check.rc == 1
    - conda_env_exists_check.stdout == ""

# Install jupyterhub
- name: Install jupyterhub in conda environment
  become: yes
  become_user: root
  shell: source {{ anaconda_bin_path }}/activate {{ jupyterhub_conda_env }} && conda install jupyterhub --yes

# Install jupyterhub-related packages
- name: Install jupyterhub-related packages in conda environment
  become: yes
  become_user: root
  shell: source {{ anaconda_bin_path }}/activate {{ jupyterhub_conda_env }} && conda install -c conda-forge jupyterhub-systemdspawner sudospawner jupyter_contrib_nbextensions jupyter_nbextensions_configurator importlib_resources --yes

#------------------------------------------------------------------------------#
# ==> configuration

# create jupyterhub config folder (defauts to /etc/jupyterhub)
- name: create jupyterhub config folder
  become: yes
  become_user: root
  file:
    path: "{{jupyterhub_config_folder}}"
    state: directory

# check if configuration file already there.
- name: check if jupyterhub_config.py exists
  stat:
    path: '{{jupyterhub_config_folder}}/jupyterhub_config.py'
  register: jupyterhub_config

# initialize jupyterhub configuration if not already there.
- name: initialize jupyterhub configuration
  become: yes
  become_user: root
  shell: source {{ anaconda_bin_path }}/activate {{ jupyterhub_conda_env }} && jupyterhub --generate-config
  args:
    chdir: "{{jupyterhub_config_folder}}"
  when: jupyterhub_config.stat.exists == False

# check if environment file already there.
- name: check if jupyterhub_environment exists
  stat:
    path: '{{jupyterhub_config_folder}}/jupyterhub_environment'
  register: jupyterhub_environment

# Create jupyterhub_environment if not already there.
- name:  Create jupyterhub_environment if not already there
  become: yes
  become_user: root
  template:
    src: jupyterhub_environment.j2
    dest: /etc/jupyterhub/jupyterhub_environment
  when: jupyterhub_environment.stat.exists == False

# add a token (no default - have to set this yourself)
- name: Add proxy token value.
  become: yes
  become_user: root
  lineinfile:
    path: '{{jupyterhub_config_folder}}/jupyterhub_config.py'
    line: "c.ConfigurableHTTPProxy.auth_token = '{{jupyterhub_configproxy_auth_token}}'"
  when: jupyterhub_configproxy_auth_token != ""

# add admin_users
- name: Add admin_users.
  become: yes
  become_user: root
  lineinfile:
    path: '{{jupyterhub_config_folder}}/jupyterhub_config.py'
    line: "c.Authenticator.admin_users = [ {{jupyterhub_admin_user_list}} ]"
  when: jupyterhub_admin_user_list != ""

# add white list if one specified.
- name: Add white list.
  become: yes
  become_user: root
  lineinfile:
    path: '{{jupyterhub_config_folder}}/jupyterhub_config.py'
    line: "c.Authenticator.whitelist = [ {{jupyterhub_whitelist_list}} ]"
  when: jupyterhub_whitelist_list != ""

#------------------------------------------------------------------------------#
# SSL certificates

- import_tasks: ssl.yml

#------------------------------------------------------------------------------#

#------------------------------------------------------------------------------#
# Spawners

- name: configure systemd spawner
  import_tasks: systemdspawner.yml
  when: jupyterhub_spawner == "systemdspawner"

- name: configure sudospawner
  import_tasks: sudospawner.yml
  when: jupyterhub_spawner == "sudospawner"

#------------------------------------------------------------------------------#

# FileNotFoundError: [Errno 2] No such file or directory: 'configurable-http-proxy': 'configurable-http-proxy'
# If you run jupyterhub on startup with systemd, and it won't start, and you encounter the following error when you run "sudo service jupyterhub status":
#   File "/usr/lib/python3.6/subprocess.py", line 1344, in _execute_child
#     raise child_exception_type( errno_num, err_msg, err_filename )
# "FileNotFoundError: [Errno 2] No such file or directory: 'configurable-http-proxy': 'configurable-http-proxy'"
# It is likely that the proxy executable is not on systemd's PATH.
# Try making a link to the file  /usr/local/bin/configurable-http-proxy in /usr/bin:
#     sudo ln -s /usr/local/bin/configurable-http-proxy /usr/bin/configurable-http-proxy
# If this fixes it, you should remove that symbolic link and specify the path in your jupyter_config.py:
# "You can also set an absolute path in jupyterhub_config.py: `c.ConfigurableHTTPProxy.command = '/usr/local/bin/configurable-http-proxy'`, but there's a very good chance that there could be other PATH-related issues as well."
# - from https://github.com/jupyterhub/jupyterhub/issues/930

# configure jupyterhub with full path to configurable-http-proxy.
- name: configure jupyterhub with full path to configurable-http-proxy.
  become: yes
  become_user: root
  lineinfile:
    path: '{{jupyterhub_config_folder}}/jupyterhub_config.py'
    line: "#c.ConfigurableHTTPProxy.command = '{{jupyterhub_proxy_command_path}}'"
  when: jupyterhub_proxy_command_path != ""

#------------------------------------------------------------------------------#
# systemd service

- import_tasks: systemd_service.yml

#------------------------------------------------------------------------------#

# open firewall for jupyterhub
- name: Allow jupyterhub TCP port
  become: yes
  become_user: root
  shell: firewall-cmd --permanent --zone=public --add-port=8000/tcp
  notify: reload firewall
  when: jupyterhub_open_firewall == true

- name: Allow jupyterhub UDP port
  become: yes
  become_user: root
  shell: firewall-cmd --permanent --zone=public --add-port=8000/udp
  notify: reload firewall
  when: jupyterhub_open_firewall == true

# add turning on nbextensions

# install juptyer nbextensions
# (sudo -H) jupyter contrib nbextension install --system --symlink
- name: install jupyter nbextensions
  become: yes
  become_user: root
  shell: source {{ anaconda_bin_path }}/activate {{ jupyterhub_conda_env }} && jupyter contrib nbextension install --system --symlink

# enable nbextensions_configurator.
# (sudo -H) jupyter nbextensions_configurator enable --system
- name: enable nbextensions_configurator
  become: yes
  become_user: root
  shell: source {{ anaconda_bin_path }}/activate {{ jupyterhub_conda_env }} && jupyter nbextensions_configurator enable --system

# and install table of contents in jupyterlab.
# (sudo -H) jupyterÂ labextension install jupyterlab-toc
#- name: install jupyterlab extension jupyterlab-toc
#  become: yes
#  become_user: root
#  shell: jupyter labextension install jupyterlab-toc

# if R installed, should also install R jupyter kernel.

# sudo -E apt-get install build-essential gfortran libcurl4-gnutls-dev;
# install R jupyter kernel dependencies
#- name: install R jupyter kernel dependencies
#  become: yes
#  become_user: root
#  apt:
#    name:
#     - build-essential
#     - nodejs
#     - libzmq3-dev
#    state: present

# install R packages.
# sudo -E R -e "install.packages( c('repr', 'IRdisplay', 'evaluate', 'crayon', 'pbdZMQ', 'devtools', 'uuid', 'digest'), c( '/usr/local/lib/R/site-library'), repos='http://cran.us.r-project.org')"
#- name: install R packages required for R jupyter kernel
#  become: yes
#  become_user: root
#  shell: R -e "install.packages( c('repr', 'IRdisplay', 'evaluate', 'crayon', 'pbdZMQ', 'devtools', 'uuid', 'digest'), c( '/usr/local/lib/R/site-library'), repos='http://cran.us.r-project.org')"

# install IRKernel R package
# sudo -E R -e "devtools::install_github('IRkernel/IRkernel')"
#- name: install IRKernel R package for R jupyter kernel
#  become: yes
#  become_user: root
#  shell: R -e "devtools::install_github('IRkernel/IRkernel')"

# install R jupyter kernel
# sudo -E R -e "IRkernel::installspec(user = FALSE)"
#- name: install R jupyter kernel
#  become: yes
#  become_user: root
#  shell: R -e "IRkernel::installspec(user = FALSE)"

# SELINUX?

# sudo /sbin/restorecon -v /etc/jupyterhub/conda_env/bin/python3.8
- name: allow jupyterhub to do some thing or another in SELINUX.
  become: yes
  become_user: root
  shell: /sbin/restorecon -v {{ jupyterhub_conda_env_bin_path }}/python3.8
  when: jupyterhub_is_selinux == true
