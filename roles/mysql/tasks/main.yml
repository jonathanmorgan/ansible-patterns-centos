---
# This playbook will install and configure MySQL.

# Install MySQL?

# for CentOS 7, add downloading and verifying RPM. Then, should proceed as normal.

# install MySQL RPM from mysql.org
- name: install MySQL RPM from mysql.org
  become: yes
  become_user: root
  yum:
    name:
      - https://dev.mysql.com/get/mysql80-community-release-el7-3.noarch.rpm
  when: server_centos_version == "7"

# what version of MySQL?

# mysql 5.7 (57)
- name: disable mysql 8.0
  become: yes
  become_user: root
  shell: yum-config-manager --disable mysql80-community
  when:
    - server_centos_version == "7"
    - server_mysql_version == "57"

- name: enable mysql 5.7
  become: yes
  become_user: root
  shell: yum-config-manager --enable mysql57-community
  when:
    - server_centos_version == "7"
    - server_mysql_version == "57"

# mysql 8.0 (80)
- name: disable mysql 5.7
  become: yes
  become_user: root
  shell: yum-config-manager --disable mysql57-community
  when:
    - server_centos_version == "7"
    - server_mysql_version == "80"

- name: enable mysql 8.0
  become: yes
  become_user: root
  shell: yum-config-manager --enable mysql80-community
  when:
    - server_centos_version == "7"
    - server_mysql_version == "80"

# install MySQL packages
- name: Install MySQL packages (dnf)
  become: yes
  become_user: root
  dnf:
    name:
      - mysql
      - mysql-server
      - mysql-devel
      - apr-devel
  when:
    - server_centos_package_manager == "dnf"
  tags: mysql
  
- name: Install MySQL packages (yum)
  become: yes
  become_user: root
  yum:
    name:
      - mysql
      - mysql-server
      - mysql-devel
      - apr-devel
  when:
    - server_centos_package_manager == "yum"
  tags: mysql

# install mysql-python package if not already installed.
- name: install mysql-python in python 2
  become: yes
  become_user: root
  pip:
    executable: "{{ python_2_pip_executable }}"
    name:
      - mysql-python
    state: latest

# install python libraries for MySQL in python 3.
- name: install python libraries for MySQL
  become: yes
  become_user: root
  pip:
    executable: "{{ python_3_pip_executable }}"
    name:
      - mysqlclient
      - PyMySQL
  tags: mysql

# enable mysql
- name: enable mysql
  become: yes
  become_user: root
  service:
    name: mysqld
    state: restarted
    enabled: yes

# set to listen on defined bind-address - MySQL
- name: Set bind-address to {{ server_mysql_bind_address }} for MySQL
  become: yes
  become_user: root
  lineinfile:
    path: '/etc/my.cnf'
    line: "bind-address = {{ server_mysql_bind_address }}"
  notify: restart mysql
  tags: mysql

# start/restart mysql
- name: restart mysql
  become: yes
  become_user: root
  service:
    name: mysqld
    state: restarted

# ==> secure database - equivalent to `mysql_secure_installation` script
- name: run mysql_secure_installation ansible module
  mysql_secure_installation:
    login_password: '{{ server_mysql_temp_root_password }}'
    new_password: "{{ server_mysql_root_password }}"
    user: root
    login_host: localhost
    hosts: [ 'localhost', '127.0.0.1', '::1' ]
    change_root_password: true
    remove_anonymous_user: true
    disallow_root_login_remotely: true
    remove_test_db: true
  register: mysql_secure
  notify: restart mysql

# To see detailed output
- debug:
    var: mysql_secure

# add MySQL configuration file to root user home with password.
- name: add MySQL configuration file to root user with password.
  become: yes
  become_user: root
  template:
    src: dot-my.cnf.j2
    dest: /root/.my.cnf
  notify: restart mysql

# Flush privileges.
- name: MySQL - flush privileges
  become: yes
  become_user: root
  shell: mysql -u root --execute="FLUSH PRIVILEGES;"
#  when: root_pwd_check.rc == 0
  notify: restart mysql
  tags: mysql

# open firewall for MySQL
- name: Allow mysql/mysql ports
  become: yes
  become_user: root
  shell: firewall-cmd --permanent --zone=public --add-service=mysql
  notify:
    - reload firewall
    - restart mysql
  tags: mysql

# create non-root admin user?

# check if non-root admin user created.
- name: check if admin user {{ server_mysql_admin_user }} exists
  shell: mysql -u root -p{{ server_mysql_root_password }} -e 'SELECT DISTINCT User FROM mysql.user;' | grep {{ server_mysql_admin_user }}
  register: admin_exists_check
  failed_when: admin_exists_check.rc == 2
  when: ( server_mysql_admin_user != "" ) and ( server_mysql_admin_password != "" )

# To see detailed output
- debug:
    var: admin_exists_check

# Creates database user {{ server_mysql_admin_user }} and password {{ server_mysql_admin_password }} with all database privileges and 'WITH GRANT OPTION'
- name: Create non-root admin user {{ server_mysql_admin_user }}
  become: yes
  become_user: root
  mysql_user:
    login_user: root
    login_password: "{{ server_mysql_root_password }}"
    name: "{{ server_mysql_admin_user }}"
    password: "{{ server_mysql_admin_password }}"
    host: "{{ item }}"
    priv: '*.*:ALL,GRANT'
    state: present
  with_items:
    - "%"
    - ::1
    - 127.0.0.1
    - "localhost"
  when:
    - server_mysql_admin_user != ""
    - server_mysql_admin_password != ""
    - admin_exists_check.rc == 1
    - admin_exists_check.stdout == ""
  notify: restart mysql
  tags: mysql